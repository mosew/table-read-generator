{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 24, "column": 0}, "map": {"version":3,"sources":["file:///Users/mose/projects/table-read-generator/src/lib/utils.ts"],"sourcesContent":["import { type ClassValue, clsx } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n"],"names":[],"mappings":";;;AAAA;AACA;;;AAEO,SAAS,GAAG,GAAG,MAAoB;IACxC,OAAO,CAAA,GAAA,2JAAA,CAAA,UAAO,AAAD,EAAE,CAAA,GAAA,qIAAA,CAAA,OAAI,AAAD,EAAE;AACtB"}},
    {"offset": {"line": 34, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 40, "column": 0}, "map": {"version":3,"sources":["file:///Users/mose/projects/table-read-generator/src/components/ui/button.tsx"],"sourcesContent":["import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-slate-950 disabled:pointer-events-none disabled:opacity-50\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-slate-900 text-slate-50 shadow hover:bg-slate-900/90\",\n        destructive:\n          \"bg-red-500 text-slate-50 shadow-sm hover:bg-red-500/90\",\n        outline:\n          \"border border-slate-200 bg-white shadow-sm hover:bg-slate-100 hover:text-slate-900\",\n        secondary:\n          \"bg-slate-100 text-slate-900 shadow-sm hover:bg-slate-100/80\",\n        ghost: \"hover:bg-slate-100 hover:text-slate-900\",\n        link: \"text-slate-900 underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-9 px-4 py-2\",\n        sm: \"h-8 rounded-md px-3 text-xs\",\n        lg: \"h-10 rounded-md px-8\",\n        icon: \"h-9 w-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }"],"names":[],"mappings":";;;;;AAAA;AAEA;AACA;AAFA;;;;;;AAIA,MAAM,iBAAiB,CAAA,GAAA,gKAAA,CAAA,MAAG,AAAD,EACvB,0NACA;IACE,UAAU;QACR,SAAS;YACP,SAAS;YACT,aACE;YACF,SACE;YACF,WACE;YACF,OAAO;YACP,MAAM;QACR;QACA,MAAM;YACJ,SAAS;YACT,IAAI;YACJ,IAAI;YACJ,MAAM;QACR;IACF;IACA,iBAAiB;QACf,SAAS;QACT,MAAM;IACR;AACF;AASF,MAAM,uBAAS,sMAAM,UAAU,CAC7B,CAAC,EAAE,SAAS,EAAE,OAAO,EAAE,IAAI,EAAE,UAAU,KAAK,EAAE,GAAG,OAAO,EAAE;IACxD,MAAM,OAAO,UAAU,gKAAA,CAAA,OAAI,GAAG;IAC9B,qBACE,8OAAC;QACC,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,eAAe;YAAE;YAAS;YAAM;QAAU;QACxD,KAAK;QACJ,GAAG,KAAK;;;;;;AAGf;AAEF,OAAO,WAAW,GAAG"}},
    {"offset": {"line": 94, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 100, "column": 0}, "map": {"version":3,"sources":["file:///Users/mose/projects/table-read-generator/src/components/ui/input.tsx"],"sourcesContent":["import * as React from \"react\"\nimport { cn } from \"@/lib/utils\"\n\nexport interface InputProps\n  extends React.InputHTMLAttributes<HTMLInputElement> {}\n\nconst Input = React.forwardRef<HTMLInputElement, InputProps>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-9 w-full rounded-md border border-slate-200 bg-transparent px-3 py-1 text-sm shadow-sm transition-colors file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-slate-500 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-slate-950 disabled:cursor-not-allowed disabled:opacity-50\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }"],"names":[],"mappings":";;;;AAAA;AACA;;;;AAKA,MAAM,sBAAQ,sMAAM,UAAU,CAC5B,CAAC,EAAE,SAAS,EAAE,IAAI,EAAE,GAAG,OAAO,EAAE;IAC9B,qBACE,8OAAC;QACC,MAAM;QACN,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,2UACA;QAEF,KAAK;QACJ,GAAG,KAAK;;;;;;AAGf;AAEF,MAAM,WAAW,GAAG"}},
    {"offset": {"line": 123, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 129, "column": 0}, "map": {"version":3,"sources":["file:///Users/mose/projects/table-read-generator/src/components/ui/label.tsx"],"sourcesContent":["import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cn } from \"@/lib/utils\"\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\",\n      className\n    )}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }"],"names":[],"mappings":";;;;AAAA;AAEA;AADA;;;;;AAGA,MAAM,sBAAQ,sMAAM,UAAU,CAG5B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC,kKAAe,IAAI;QAClB,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,8FACA;QAED,GAAG,KAAK;;;;;;AAGb,MAAM,WAAW,GAAG,kKAAe,IAAI,CAAC,WAAW"}},
    {"offset": {"line": 151, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 157, "column": 0}, "map": {"version":3,"sources":["file:///Users/mose/projects/table-read-generator/src/components/ui/textarea.tsx"],"sourcesContent":["import * as React from \"react\"\nimport { cn } from \"@/lib/utils\"\n\nexport interface TextareaProps\n  extends React.TextareaHTMLAttributes<HTMLTextAreaElement> {}\n\nconst Textarea = React.forwardRef<HTMLTextAreaElement, TextareaProps>(\n  ({ className, ...props }, ref) => {\n    return (\n      <textarea\n        className={cn(\n          \"flex min-h-[60px] w-full rounded-md border border-slate-200 bg-transparent px-3 py-2 text-sm shadow-sm placeholder:text-slate-500 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-slate-950 disabled:cursor-not-allowed disabled:opacity-50\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }"],"names":[],"mappings":";;;;AAAA;AACA;;;;AAKA,MAAM,yBAAW,sMAAM,UAAU,CAC/B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE;IACxB,qBACE,8OAAC;QACC,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,kQACA;QAEF,KAAK;QACJ,GAAG,KAAK;;;;;;AAGf;AAEF,SAAS,WAAW,GAAG"}},
    {"offset": {"line": 179, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 194, "column": 0}, "map": {"version":3,"sources":["file:///Users/mose/projects/table-read-generator/src/components/TableReadGenerator.tsx"],"sourcesContent":["\"use client\";\nimport React, { useState } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Textarea } from '@/components/ui/textarea';\nimport { AlertCircle, Copy } from 'lucide-react';\nimport { Alert, AlertDescription, AlertTitle } from '@/components/ui/alert';\n\nconst CLAUDE_PROMPT = `You are generating a dramatic scene for a table read party game. This should be entertaining and engaging, taking approximately 5 minutes to read out loud at a natural pace.\n\nFollow these rules:\n1. Write in standard screenplay format\n2. Include clear stage directions in parentheses\n3. Keep lines natural and performable\n4. Make sure each character gets roughly equal speaking time\n5. Include moments of both dialogue and action\n6. Make it approximately 2-3 pages of script\n7. Create distinct personality traits for each character\n\nSTYLE: {{style}}\nNUMBER OF PLAYERS: {{numPlayers}}\n{{#if plot}}PLOT OUTLINE: {{plot}}{{/if}}\n\nGenerate a complete scene that matches these requirements. The scene should be self-contained with a clear beginning, middle, and end.`;\n\nconst TableReadGenerator = () => {\n  const [numPlayers, setNumPlayers] = useState(2);\n  const [style, setStyle] = useState('');\n  const [plot, setPlot] = useState('');\n  const [script, setScript] = useState('');\n  const [generating, setGenerating] = useState(false);\n  const [error, setError] = useState('');\n\n  const generateScript = async () => {\n    setGenerating(true);\n    setError('');\n    \n    try {\n      const prompt = CLAUDE_PROMPT\n        .replace('{{style}}', style)\n        .replace('{{numPlayers}}', numPlayers)\n        .replace('{{#if plot}}PLOT OUTLINE: {{plot}}{{/if}}', \n          plot ? `PLOT OUTLINE: ${plot}` : '');\n\n      const response = await fetch('YOUR_API_ENDPOINT', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'anthropic-version': '2023-06-01',\n          'x-api-key': 'YOUR_API_KEY'\n        },\n        body: JSON.stringify({\n          model: \"claude-3-sonnet-20240229\",\n          max_tokens: 4000,\n          messages: [{\n            role: \"user\",\n            content: prompt\n          }],\n          temperature: 0.7\n        })\n      });\n\n      if (!response.ok) {\n        throw new Error('Failed to generate script');\n      }\n\n      const data = await response.json();\n      setScript(data.content[0].text);\n    } catch (err) {\n      setError('Failed to generate script. Please try again.');\n      console.error('Generation error:', err);\n    } finally {\n      setGenerating(false);\n    }\n  };\n\n  const copyToClipboard = () => {\n    navigator.clipboard.writeText(script);\n  };\n\n  return (\n    <div className=\"max-w-2xl mx-auto p-4 space-y-6\">\n      <Card>\n        <CardHeader>\n          <CardTitle>Table Read Generator</CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div>\n            <Label htmlFor=\"players\">Number of Players</Label>\n            <Input\n              id=\"players\"\n              type=\"number\"\n              min=\"2\"\n              max=\"5\"\n              value={numPlayers}\n              onChange={(e) => setNumPlayers(parseInt(e.target.value))}\n              className=\"w-full\"\n            />\n          </div>\n\n          <div>\n            <Label htmlFor=\"style\">Style Description</Label>\n            <Input\n              id=\"style\"\n              placeholder=\"e.g., Wes Anderson-style with dry humor and ornate dialogue\"\n              value={style}\n              onChange={(e) => setStyle(e.target.value)}\n              className=\"w-full\"\n            />\n          </div>\n\n          <div>\n            <Label htmlFor=\"plot\">Scene Plot (Optional)</Label>\n            <Textarea\n              id=\"plot\"\n              placeholder=\"A tense confrontation in an antique shop...\"\n              value={plot}\n              onChange={(e) => setPlot(e.target.value)}\n              className=\"w-full\"\n            />\n          </div>\n\n          <Button \n            onClick={generateScript}\n            disabled={generating || !style}\n            className=\"w-full\"\n          >\n            {generating ? 'Writing your scene...' : 'Generate Scene'}\n          </Button>\n\n          {error && (\n            <Alert variant=\"destructive\">\n              <AlertCircle className=\"h-4 w-4\" />\n              <AlertTitle>Error</AlertTitle>\n              <AlertDescription>{error}</AlertDescription>\n            </Alert>\n          )}\n\n          {script && (\n            <div className=\"mt-6 space-y-4\">\n              <div className=\"flex justify-between items-center\">\n                <h3 className=\"text-lg font-medium\">Your Scene</h3>\n                <Button variant=\"outline\" size=\"sm\" onClick={copyToClipboard}>\n                  <Copy className=\"h-4 w-4 mr-2\" />\n                  Copy\n                </Button>\n              </div>\n              <pre className=\"p-4 bg-gray-50 rounded-lg whitespace-pre-wrap font-mono text-sm\">\n                {script}\n              </pre>\n            </div>\n          )}\n\n          <Alert>\n            <AlertCircle className=\"h-4 w-4\" />\n            <AlertTitle>Style Tips</AlertTitle>\n            <AlertDescription>\n              Try specific prompts like \"Sorkin-style rapid-fire dialogue about mundane topics\" or \"Kubrick-esque psychological tension with long pauses\"\n            </AlertDescription>\n          </Alert>\n        </CardContent>\n      </Card>\n    </div>\n  );\n};\n\nexport default TableReadGenerator;"],"names":[],"mappings":"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"}},
    {"offset": {"line": 523, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}